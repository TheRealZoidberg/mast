Traceback (most recent call last):
  File "/usr/share/miniconda/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Option 1: Respond to prompt
Observations.login()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNoKeyringError[0m                            Traceback (most recent call last)
Cell [0;32mIn [2], line 2[0m
[1;32m      1[0m [38;5;66;03m# Option 1: Respond to prompt[39;00m
[0;32m----> 2[0m [43mObservations[49m[38;5;241;43m.[39;49m[43mlogin[49m[43m([49m[43m)[49m

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/astroquery/query.py:155[0m, in [0;36mLoginABCMeta.__new__.<locals>.login[0;34m(*args, **kwargs)[0m
[1;32m    154[0m [38;5;28;01mdef[39;00m [38;5;21mlogin[39m([38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs):
[0;32m--> 155[0m     [43mbases[49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m[38;5;241;43m.[39;49m[43mlogin[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/astroquery/query.py:518[0m, in [0;36mQueryWithLogin.login[0;34m(self, *args, **kwargs)[0m
[1;32m    516[0m [38;5;28;01mdef[39;00m [38;5;21mlogin[39m([38;5;28mself[39m, [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs):
[1;32m    517[0m     [38;5;28;01mwith[39;00m suspend_cache([38;5;28mself[39m):
[0;32m--> 518[0m         [38;5;28mself[39m[38;5;241m.[39m_authenticated [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_login[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    519[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_authenticated

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/astroquery/mast/core.py:66[0m, in [0;36mMastQueryWithLogin._login[0;34m(self, token, store_token, reenter_token)[0m
[1;32m     45[0m [38;5;28;01mdef[39;00m [38;5;21m_login[39m([38;5;28mself[39m, token[38;5;241m=[39m[38;5;28;01mNone[39;00m, store_token[38;5;241m=[39m[38;5;28;01mFalse[39;00m, reenter_token[38;5;241m=[39m[38;5;28;01mFalse[39;00m):
[1;32m     46[0m     [38;5;124;03m"""[39;00m
[1;32m     47[0m [38;5;124;03m    Log into the MAST portal.[39;00m
[1;32m     48[0m 
[0;32m   (...)[0m
[1;32m     63[0m [38;5;124;03m        This is the way to overwrite an already stored password on the keyring.[39;00m
[1;32m     64[0m [38;5;124;03m    """[39;00m
[0;32m---> 66[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_auth_obj[49m[38;5;241;43m.[39;49m[43mlogin[49m[43m([49m[43mtoken[49m[43m,[49m[43m [49m[43mstore_token[49m[43m,[49m[43m [49m[43mreenter_token[49m[43m)[49m

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/astroquery/mast/auth.py:67[0m, in [0;36mMastAuth.login[0;34m(self, token, store_token, reenter_token)[0m
[1;32m     64[0m     token [38;5;241m=[39m os[38;5;241m.[39menviron[[38;5;124m"[39m[38;5;124mMAST_API_TOKEN[39m[38;5;124m"[39m]
[1;32m     66[0m [38;5;28;01mif[39;00m token [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[0;32m---> 67[0m     token [38;5;241m=[39m [43mkeyring[49m[38;5;241;43m.[39;49m[43mget_password[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mastroquery:mast.stsci.edu.token[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mmasttoken[39;49m[38;5;124;43m"[39;49m[43m)[49m
[1;32m     69[0m [38;5;28;01mif[39;00m token [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mor[39;00m reenter_token:
[1;32m     70[0m     info_msg [38;5;241m=[39m [38;5;124m"[39m[38;5;124mIf you do not have an API token already, visit the following link to create one: [39m[38;5;124m"[39m

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/keyring/core.py:55[0m, in [0;36mget_password[0;34m(service_name, username)[0m
[1;32m     53[0m [38;5;28;01mdef[39;00m [38;5;21mget_password[39m(service_name: [38;5;28mstr[39m, username: [38;5;28mstr[39m) [38;5;241m-[39m[38;5;241m>[39m typing[38;5;241m.[39mOptional[[38;5;28mstr[39m]:
[1;32m     54[0m     [38;5;124;03m"""Get password from the specified service."""[39;00m
[0;32m---> 55[0m     [38;5;28;01mreturn[39;00m [43mget_keyring[49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[43mget_password[49m[43m([49m[43mservice_name[49m[43m,[49m[43m [49m[43musername[49m[43m)[49m

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/keyring/backends/fail.py:25[0m, in [0;36mKeyring.get_password[0;34m(self, service, username, password)[0m
[1;32m     18[0m [38;5;28;01mdef[39;00m [38;5;21mget_password[39m([38;5;28mself[39m, service, username, password[38;5;241m=[39m[38;5;28;01mNone[39;00m):
[1;32m     19[0m     msg [38;5;241m=[39m (
[1;32m     20[0m         [38;5;124m"[39m[38;5;124mNo recommended backend was available. Install a recommended 3rd [39m[38;5;124m"[39m
[1;32m     21[0m         [38;5;124m"[39m[38;5;124mparty backend package; or, install the keyrings.alt package if [39m[38;5;124m"[39m
[1;32m     22[0m         [38;5;124m"[39m[38;5;124myou want to use the non-recommended backends. See [39m[38;5;124m"[39m
[1;32m     23[0m         [38;5;124m"[39m[38;5;124mhttps://pypi.org/project/keyring for details.[39m[38;5;124m"[39m
[1;32m     24[0m     )
[0;32m---> 25[0m     [38;5;28;01mraise[39;00m NoKeyringError(msg)

[0;31mNoKeyringError[0m: No recommended backend was available. Install a recommended 3rd party backend package; or, install the keyrings.alt package if you want to use the non-recommended backends. See https://pypi.org/project/keyring for details.
NoKeyringError: No recommended backend was available. Install a recommended 3rd party backend package; or, install the keyrings.alt package if you want to use the non-recommended backends. See https://pypi.org/project/keyring for details.

