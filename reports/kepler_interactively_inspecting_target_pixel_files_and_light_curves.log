Traceback (most recent call last):
  File "/usr/share/miniconda/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
tpf = lk.search_targetpixelfile("HL Tau", mission='K2', campaign=13, cadence='long').download()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mHTTPError[0m                                 Traceback (most recent call last)
Cell [0;32mIn [2], line 1[0m
[0;32m----> 1[0m tpf [38;5;241m=[39m [43mlk[49m[38;5;241;43m.[39;49m[43msearch_targetpixelfile[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mHL Tau[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43mmission[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mK2[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[43mcampaign[49m[38;5;241;43m=[39;49m[38;5;241;43m13[39;49m[43m,[49m[43m [49m[43mcadence[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mlong[39;49m[38;5;124;43m'[39;49m[43m)[49m[38;5;241m.[39mdownload()

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/memoization/caching/plain_cache.py:42[0m, in [0;36mget_caching_wrapper.<locals>.wrapper[0;34m(*args, **kwargs)[0m
[1;32m     40[0m [38;5;28;01mwith[39;00m lock:
[1;32m     41[0m     misses [38;5;241m+[39m[38;5;241m=[39m [38;5;241m1[39m
[0;32m---> 42[0m result [38;5;241m=[39m [43muser_function[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m     43[0m cache[key] [38;5;241m=[39m values_toolkit[38;5;241m.[39mmake_cache_value(result, ttl)
[1;32m     44[0m key_argument_map[key] [38;5;241m=[39m (args, kwargs)

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/lightkurve/search.py:704[0m, in [0;36msearch_targetpixelfile[0;34m(target, radius, exptime, cadence, mission, author, quarter, month, campaign, sector, limit)[0m
[1;32m    614[0m [38;5;124;03m"""Search the `MAST data archive <https://archive.stsci.edu>`_ for target pixel files.[39;00m
[1;32m    615[0m 
[1;32m    616[0m [38;5;124;03mThis function fetches a data table that lists the Target Pixel Files (TPFs)[39;00m
[0;32m   (...)[0m
[1;32m    701[0m [38;5;124;03m    >>> search_targetpixelfile('Kepler-10', radius=100, quarter=4).download_all()  # doctest: +SKIP[39;00m
[1;32m    702[0m [38;5;124;03m"""[39;00m
[1;32m    703[0m [38;5;28;01mtry[39;00m:
[0;32m--> 704[0m     [38;5;28;01mreturn[39;00m [43m_search_products[49m[43m([49m
[1;32m    705[0m [43m        [49m[43mtarget[49m[43m,[49m
[1;32m    706[0m [43m        [49m[43mradius[49m[38;5;241;43m=[39;49m[43mradius[49m[43m,[49m
[1;32m    707[0m [43m        [49m[43mfiletype[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mTarget Pixel[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m    708[0m [43m        [49m[43mexptime[49m[38;5;241;43m=[39;49m[43mexptime[49m[43m [49m[38;5;129;43;01mor[39;49;00m[43m [49m[43mcadence[49m[43m,[49m
[1;32m    709[0m [43m        [49m[43mmission[49m[38;5;241;43m=[39;49m[43mmission[49m[43m,[49m
[1;32m    710[0m [43m        [49m[43mprovenance_name[49m[38;5;241;43m=[39;49m[43mauthor[49m[43m,[49m
[1;32m    711[0m [43m        [49m[43mquarter[49m[38;5;241;43m=[39;49m[43mquarter[49m[43m,[49m
[1;32m    712[0m [43m        [49m[43mmonth[49m[38;5;241;43m=[39;49m[43mmonth[49m[43m,[49m
[1;32m    713[0m [43m        [49m[43mcampaign[49m[38;5;241;43m=[39;49m[43mcampaign[49m[43m,[49m
[1;32m    714[0m [43m        [49m[43msector[49m[38;5;241;43m=[39;49m[43msector[49m[43m,[49m
[1;32m    715[0m [43m        [49m[43mlimit[49m[38;5;241;43m=[39;49m[43mlimit[49m[43m,[49m
[1;32m    716[0m [43m    [49m[43m)[49m
[1;32m    717[0m [38;5;28;01mexcept[39;00m SearchError [38;5;28;01mas[39;00m exc:
[1;32m    718[0m     log[38;5;241m.[39merror(exc)

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/lightkurve/search.py:991[0m, in [0;36m_search_products[0;34m(target, radius, filetype, mission, provenance_name, exptime, quarter, month, campaign, sector, limit, **extra_query_criteria)[0m
[1;32m    989[0m [38;5;28;01mif[39;00m filetype[38;5;241m.[39mlower() [38;5;241m==[39m [38;5;124m"[39m[38;5;124mffi[39m[38;5;124m"[39m [38;5;129;01mand[39;00m radius [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[1;32m    990[0m     radius [38;5;241m=[39m [38;5;241m0.0001[39m [38;5;241m*[39m u[38;5;241m.[39marcsec
[0;32m--> 991[0m observations [38;5;241m=[39m [43m_query_mast[49m[43m([49m
[1;32m    992[0m [43m    [49m[43mtarget[49m[43m,[49m
[1;32m    993[0m [43m    [49m[43mradius[49m[38;5;241;43m=[39;49m[43mradius[49m[43m,[49m
[1;32m    994[0m [43m    [49m[43mproject[49m[38;5;241;43m=[39;49m[43mmission[49m[43m,[49m
[1;32m    995[0m [43m    [49m[43mprovenance_name[49m[38;5;241;43m=[39;49m[43mprovenance_name[49m[43m,[49m
[1;32m    996[0m [43m    [49m[43mexptime[49m[38;5;241;43m=[39;49m[43mexptime[49m[43m,[49m
[1;32m    997[0m [43m    [49m[43msequence_number[49m[38;5;241;43m=[39;49m[43mcampaign[49m[43m [49m[38;5;129;43;01mor[39;49;00m[43m [49m[43msector[49m[43m,[49m
[1;32m    998[0m [43m    [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mextra_query_criteria[49m[43m,[49m
[1;32m    999[0m [43m[49m[43m)[49m
[1;32m   1000[0m log[38;5;241m.[39mdebug(
[1;32m   1001[0m     [38;5;124m"[39m[38;5;124mMAST found [39m[38;5;132;01m{}[39;00m[38;5;124m observations. [39m[38;5;124m"[39m
[1;32m   1002[0m     [38;5;124m"[39m[38;5;124mNow querying MAST for the corresponding data products.[39m[38;5;124m"[39m
[1;32m   1003[0m     [38;5;124m"[39m[38;5;124m"[39m[38;5;241m.[39mformat([38;5;28mlen[39m(observations))
[1;32m   1004[0m )
[1;32m   1005[0m [38;5;28;01mif[39;00m [38;5;28mlen[39m(observations) [38;5;241m==[39m [38;5;241m0[39m:

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/lightkurve/search.py:1218[0m, in [0;36m_query_mast[0;34m(target, radius, project, provenance_name, exptime, sequence_number, **extra_query_criteria)[0m
[1;32m   1216[0m     warnings[38;5;241m.[39mfilterwarnings([38;5;124m"[39m[38;5;124mignore[39m[38;5;124m"[39m, category[38;5;241m=[39mNoResultsWarning)
[1;32m   1217[0m     warnings[38;5;241m.[39mfilterwarnings([38;5;124m"[39m[38;5;124mignore[39m[38;5;124m"[39m, message[38;5;241m=[39m[38;5;124m"[39m[38;5;124mt_exptime is continuous[39m[38;5;124m"[39m)
[0;32m-> 1218[0m     obs [38;5;241m=[39m [43mObservations[49m[38;5;241;43m.[39;49m[43mquery_criteria[49m[43m([49m[43mobjectname[49m[38;5;241;43m=[39;49m[43mtarget[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mquery_criteria[49m[43m)[49m
[1;32m   1219[0m obs[38;5;241m.[39msort([38;5;124m"[39m[38;5;124mdistance[39m[38;5;124m"[39m)
[1;32m   1220[0m [38;5;66;03m# We use `exptime` as an alias for `t_exptime`[39;00m

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/astroquery/utils/class_or_instance.py:25[0m, in [0;36mclass_or_instance.__get__.<locals>.f[0;34m(*args, **kwds)[0m
[1;32m     23[0m [38;5;28;01mdef[39;00m [38;5;21mf[39m([38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwds):
[1;32m     24[0m     [38;5;28;01mif[39;00m obj [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m---> 25[0m         [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mfn[49m[43m([49m[43mobj[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwds[49m[43m)[49m
[1;32m     26[0m     [38;5;28;01melse[39;00m:
[1;32m     27[0m         [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39mfn([38;5;28mcls[39m, [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwds)

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/astroquery/utils/process_asyncs.py:26[0m, in [0;36masync_to_sync.<locals>.create_method.<locals>.newmethod[0;34m(self, *args, **kwargs)[0m
[1;32m     22[0m [38;5;129m@class_or_instance[39m
[1;32m     23[0m [38;5;28;01mdef[39;00m [38;5;21mnewmethod[39m([38;5;28mself[39m, [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs):
[1;32m     24[0m     verbose [38;5;241m=[39m kwargs[38;5;241m.[39mpop([38;5;124m'[39m[38;5;124mverbose[39m[38;5;124m'[39m, [38;5;28;01mFalse[39;00m)
[0;32m---> 26[0m     response [38;5;241m=[39m [38;5;28;43mgetattr[39;49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43masync_method_name[49m[43m)[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m     27[0m     [38;5;28;01mif[39;00m kwargs[38;5;241m.[39mget([38;5;124m'[39m[38;5;124mget_query_payload[39m[38;5;124m'[39m) [38;5;129;01mor[39;00m kwargs[38;5;241m.[39mget([38;5;124m'[39m[38;5;124mfield_help[39m[38;5;124m'[39m):
[1;32m     28[0m         [38;5;28;01mreturn[39;00m response

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/astroquery/utils/class_or_instance.py:25[0m, in [0;36mclass_or_instance.__get__.<locals>.f[0;34m(*args, **kwds)[0m
[1;32m     23[0m [38;5;28;01mdef[39;00m [38;5;21mf[39m([38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwds):
[1;32m     24[0m     [38;5;28;01mif[39;00m obj [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m---> 25[0m         [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mfn[49m[43m([49m[43mobj[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwds[49m[43m)[49m
[1;32m     26[0m     [38;5;28;01melse[39;00m:
[1;32m     27[0m         [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39mfn([38;5;28mcls[39m, [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwds)

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/astroquery/mast/observations.py:303[0m, in [0;36mObservationsClass.query_criteria_async[0;34m(self, pagesize, page, **criteria)[0m
[1;32m    299[0m     service [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_caom_filtered
[1;32m    300[0m     params [38;5;241m=[39m {[38;5;124m"[39m[38;5;124mcolumns[39m[38;5;124m"[39m: [38;5;124m"[39m[38;5;124m*[39m[38;5;124m"[39m,
[1;32m    301[0m               [38;5;124m"[39m[38;5;124mfilters[39m[38;5;124m"[39m: mashup_filters}
[0;32m--> 303[0m [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_portal_api_connection[49m[38;5;241;43m.[39;49m[43mservice_request_async[49m[43m([49m[43mservice[49m[43m,[49m[43m [49m[43mparams[49m[43m)[49m

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/astroquery/utils/class_or_instance.py:25[0m, in [0;36mclass_or_instance.__get__.<locals>.f[0;34m(*args, **kwds)[0m
[1;32m     23[0m [38;5;28;01mdef[39;00m [38;5;21mf[39m([38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwds):
[1;32m     24[0m     [38;5;28;01mif[39;00m obj [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m---> 25[0m         [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mfn[49m[43m([49m[43mobj[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwds[49m[43m)[49m
[1;32m     26[0m     [38;5;28;01melse[39;00m:
[1;32m     27[0m         [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39mfn([38;5;28mcls[39m, [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwds)

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/astroquery/mast/discovery_portal.py:363[0m, in [0;36mPortalAPI.service_request_async[0;34m(self, service, params, pagesize, page, **kwargs)[0m
[1;32m    360[0m     mashup_request[prop] [38;5;241m=[39m value
[1;32m    362[0m req_string [38;5;241m=[39m _prepare_service_request_string(mashup_request)
[0;32m--> 363[0m response [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_request[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mPOST[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mMAST_REQUEST_URL[49m[43m,[49m[43m [49m[43mdata[49m[38;5;241;43m=[39;49m[43mreq_string[49m[43m,[49m[43m [49m[43mheaders[49m[38;5;241;43m=[39;49m[43mheaders[49m[43m,[49m
[1;32m    364[0m [43m                         [49m[43mretrieve_all[49m[38;5;241;43m=[39;49m[43mretrieve_all[49m[43m)[49m
[1;32m    366[0m [38;5;28;01mreturn[39;00m response

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/astroquery/mast/discovery_portal.py:190[0m, in [0;36mPortalAPI._request[0;34m(self, method, url, params, data, headers, files, stream, auth, retrieve_all)[0m
[1;32m    187[0m     [38;5;28;01mraise[39;00m [38;5;167;01mTimeoutError[39;00m([38;5;124m"[39m[38;5;124mTimeout limit of [39m[38;5;132;01m{}[39;00m[38;5;124m exceeded.[39m[38;5;124m"[39m[38;5;241m.[39mformat([38;5;28mself[39m[38;5;241m.[39mTIMEOUT))
[1;32m    189[0m [38;5;66;03m# Raising error based on HTTP status if necessary[39;00m
[0;32m--> 190[0m [43mresponse[49m[38;5;241;43m.[39;49m[43mraise_for_status[49m[43m([49m[43m)[49m
[1;32m    192[0m result [38;5;241m=[39m response[38;5;241m.[39mjson()
[1;32m    194[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m result:  [38;5;66;03m# kind of hacky, but col_config service returns nothing if there is an error[39;00m

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/requests/models.py:960[0m, in [0;36mResponse.raise_for_status[0;34m(self)[0m
[1;32m    957[0m     http_error_msg [38;5;241m=[39m [38;5;124mu[39m[38;5;124m'[39m[38;5;132;01m%s[39;00m[38;5;124m Server Error: [39m[38;5;132;01m%s[39;00m[38;5;124m for url: [39m[38;5;132;01m%s[39;00m[38;5;124m'[39m [38;5;241m%[39m ([38;5;28mself[39m[38;5;241m.[39mstatus_code, reason, [38;5;28mself[39m[38;5;241m.[39murl)
[1;32m    959[0m [38;5;28;01mif[39;00m http_error_msg:
[0;32m--> 960[0m     [38;5;28;01mraise[39;00m HTTPError(http_error_msg, response[38;5;241m=[39m[38;5;28mself[39m)

[0;31mHTTPError[0m: 503 Server Error: Service Unavailable for url: https://mast.stsci.edu/api/v0/invoke
HTTPError: 503 Server Error: Service Unavailable for url: https://mast.stsci.edu/api/v0/invoke

